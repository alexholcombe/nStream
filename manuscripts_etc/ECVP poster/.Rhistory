library(ggplot2)
library(reshape2)
library(papaja)
theme_set(theme_apa(base_size = 15) )
savePlots <- T
posterior <- function(t, N1, N2=NULL, delta, lo=-Inf, hi = Inf,
priorMean=0,priorSD=1) {
N = ifelse(is.null(N2), N1, N1*N2/(N1+N2))
df  = ifelse(is.null(N2), N1 - 1, N1 + N2 - 2)
#prior and likelihood
#prior <- function(delta) dnorm(delta, priorMean, priorSD)*as.integer(delta >= lo)*as.integer(delta <= hi)
prior <- function(delta) dcauchy(delta, priorMean, priorSD)*as.integer(delta >= lo)*as.integer(delta <= hi)
K=1/integrate(prior,lower=lo,upper=hi)[[1]]
f=function(delta) K*prior(delta)
#(The as.integer bits above just provide bounds for the prior if you want them)
likelihood <- function(delta) dt(t, df, delta*sqrt(N))
#marginal likelihood
marginal <- integrate(function(x) f(x)*likelihood(x), lo, hi)[[1]]
#posterior
post <- function(x) f(x)*likelihood(x) / marginal
return(post(delta))
}
null = 0
MMlatency <- read.csv('../modelOutput/CSV/TGRSVP_Exp2_LatencyNorm.csv')
MMprecision <- read.csv('../modelOutput/CSV/TGRSVP_Exp2_precisionNorm.csv')
MMefficacy <- read.csv('../modelOutput/CSV/TGRSVP_Exp2_efficacyNorm.csv')
latency <- data.frame(twoStreams = MMlatency$SingleLeft[MMlatency$Group == 1], eightStreams = MMlatency$SingleLeft[MMlatency$Group == 2])
precision <- data.frame(twoStreams = MMprecision$SingleLeft[MMprecision$Group == 1], eightStreams = MMprecision$SingleLeft[MMprecision$Group == 2])
efficacy <- data.frame(twoStreams = MMefficacy$SingleLeft[MMefficacy$Group == 1], eightStreams = MMefficacy$SingleLeft[MMefficacy$Group == 2])
frequentistTestLatency = t.test(x = latency$eightStreams, y=latency$twoStreams, paired = T)
tLatency <- frequentistTestLatency$statistic[[1]]
frequentistTestLatency
latencyForPlot <- melt(latency, measure.vars = c('twoStreams','eightStreams'),variable.name = 'Condition', value.name = 'Estimate')
latencyForPlot$Participant <- ordered(rep(1:10, times = 2))
t  <- tLatency
N1 <- 10
N2 <- 10
priorMean = null
priorSD = sqrt(.5)
#examples of BF via savage-dickey ratio
#2-sided
BF10 = dcauchy(null,priorMean,priorSD) / posterior(tLatency, N1, delta=null,
priorMean=priorMean,priorSD=priorSD)
#one-sided BF
BFplus = ( 2 * dcauchy(null,priorMean,priorSD) ) / posterior(tLatency, N1, delta=null, lo=0,
priorMean=priorMean,priorSD=priorSD)
BF10
BFplus
delta  <- seq(-2, 4, .01)
posteriorAndPriorDF <- data.frame(delta = delta, posterior = posterior(t,N1,delta=delta, priorMean=priorMean,priorSD=priorSD), prior = dcauchy(delta, priorMean,priorSD))
posteriorModeLatency <- optimize(function(delta) posterior(tLatency, N1, delta=delta, priorMean=priorMean, priorSD=priorSD), interval=c(-4,4),maximum = T)[[1]]
#This would only work for normal, we use Cauchy!
#credibleIntervalDensityLower <- mean(posteriorAndPriorDF$posterior)-sd(posteriorAndPriorDF$posterior)*1.96
#credibleIntervalDensityUpper <- mean(posteriorAndPriorDF$posterior)+sd(posteriorAndPriorDF$posterior)*1.96
latencyPlot <- ggplot(latencyForPlot,aes(x=Condition, y=Estimate))+
geom_violin()+
geom_line(aes(group=Participant, colour=Participant))+
geom_point(aes(colour=Participant), size = 3)+
scale_colour_brewer(palette = 'Spectral')+
labs(x='Condition',y='Estimate (ms)',title='Latency')+
theme(plot.title = element_text(hjust=.5))
show(latencyPlot)
latencyScatter <- ggplot(latency, aes(x=twoStreams, y=eightStreams))+
geom_point(size = 4, aes(colour=ordered(1:10)))+
scale_color_brewer(palette='Spectral', name='Participant')+
lims(x=c(20,120), y=c(20,120))+
labs(title='Latency Estimates (ms)', x = 'Two Streams', y='Eight Streams')+
theme(plot.title = element_text(size=15, hjust=.5))+
annotate('text', x=100, y=45, label = paste0('BF10 = ', round(BF10,2)))+
annotate('text', x = 100, y=37, label = paste0('Effect size = ', round(posteriorModeLatency,2)))+
geom_abline(intercept = 0, slope = 1,linetype='dashed')
show(latencyScatter)
latencyBayesPlot <- ggplot(posteriorAndPriorDF, aes(x=delta))+
geom_line(aes(y=posterior, linetype = 'Posterior'))+
geom_line(aes(y=prior, linetype = 'Prior'))+
scale_linetype_manual(values = c('solid','dashed'),  guide = 'legend', name = NULL)+
labs(x = expression(delta), y='Density', title = 'Latency Effect Size')
precisionForPlot <- melt(precision, measure.vars = c('twoStreams','eightStreams'),variable.name = 'Condition', value.name = 'Estimate')
precisionForPlot$Participant <- ordered(rep(1:10, times = 2))
frequentistTestPrecision <- t.test(x = precision$eightStreams, y = precision$twoStreams, paired = T)
tPrecision <- frequentistTestPrecision$statistic[[1]]
t  <- tPrecision
N1 <- 10
N2 <- 10
priorMean =0
priorSD = sqrt(.5)
#examples of BF via savage-dickey ratio
#2-sided
BF10 = dcauchy(0,priorMean,priorSD) / posterior(tPrecision, N1, delta=0,
priorMean=priorMean,priorSD=priorSD)
#one-sided BF
BFplus = ( 2 * dcauchy(0,priorMean,priorSD) ) / posterior(tPrecision, N1, delta=0, lo=0,
priorMean=priorMean,priorSD=priorSD)
BF10
BFplus
delta  <- seq(-4, 2, .01)
posteriorModePrecision <- optimize(function(delta) posterior(tPrecision, N1, delta=delta,priorMean=priorMean,priorSD=priorSD), interval=c(-4,4),maximum = T)[[1]]
posteriorAndPriorDF <- data.frame(delta = delta, posterior = posterior(t,N1,delta=delta,
priorMean=priorMean,priorSD=priorSD), prior = dcauchy(delta, priorMean,priorSD))
posteriorModePrecision <- optimize(function(delta) posterior(tPrecision, N1, delta=delta, priorMean=priorMean, priorSD=priorSD), interval=c(-4,4),maximum = T)[[1]]
precisionPlot <- ggplot(precisionForPlot,aes(x=Condition, y=Estimate))+
geom_violin()+
geom_line(aes(group=Participant, colour=Participant))+
geom_point(aes(colour=Participant),alpha=.8, size = 3)+
scale_colour_brewer(palette = 'Spectral')+
labs(x='Condition',y='Estimate (ms)',title='Precision')+
theme(plot.title = element_text(hjust=.5))
show(precisionPlot)
precisionScatter <- ggplot(precision, aes(x=twoStreams, y=eightStreams, colour=ordered(1:10)))+
geom_point(size = 4)+
scale_color_brewer(palette='Spectral', name='Participant')+
lims(x=c(40,100), y=c(40,100))+
labs(title='Precision Estimates (ms)')+
theme(plot.title = element_text(size=15, hjust=.5))+
annotate('text', x=90, y=70, label = paste0('BF10 = ', round(BF10,2)))+
annotate('text', x = 90, y=66, label = paste0('Effect size = ', round(posteriorModePrecision,2)))+
geom_abline(intercept = 0, slope = 1,linetype='dashed')
show(precisionScatter)
precisionBayesPlot <- ggplot(posteriorAndPriorDF, aes(x=delta))+
geom_line(aes(y=posterior, linetype = 'Posterior'))+
geom_line(aes(y=prior, linetype = 'Prior'))+
scale_linetype_manual(values = c('solid','dashed'),  guide = 'legend', name = NULL)+
labs(x = expression(delta), y='Density', title = 'Precision Effect Size')
frequentistTestEfficacy <- t.test(x = efficacy$eightStreams, y = efficacy$twoStreams, paired = T)
tEfficacy <- frequentistTestEfficacy$statistic[[1]]
efficacyForPlot <- melt(efficacy, measure.vars = c('twoStreams','eightStreams'), variable.name = 'Condition',value.name = 'Estimate')
efficacyForPlot$Participant <- ordered(rep(1:10, times = 2))
t  <- tEfficacy
N1 <- 10
N2 <- 10
priorMean =0
priorSD = sqrt(.5)
#examples of BF via savage-dickey ratio
#2-sided
BF10 = dcauchy(0,priorMean,priorSD) / posterior(tEfficacy, N1, delta=0,
priorMean=priorMean,priorSD=priorSD)
#one-sided BF
BFplus = ( 2 * dcauchy(0,priorMean,priorSD) ) / posterior(tEfficacy, N1, delta=0, lo=0,
priorMean=priorMean,priorSD=priorSD)
BF10
BFplus
delta  <- seq(-2, 4, .01)
posteriorAndPriorDF <- data.frame(delta = delta, posterior = posterior(t,N1,delta=delta,
priorMean=priorMean,priorSD=priorSD), prior = dcauchy(delta, priorMean,priorSD))
posteriorModeEfficacy <- optimize(function(delta) posterior(tEfficacy, N1, delta=delta,priorMean=priorMean,priorSD=priorSD), interval=c(-4,4),maximum = T)[[1]]
efficacyPlot <- ggplot(efficacyForPlot, aes(x=Condition, y=Estimate))+
geom_violin()+
geom_line(aes(group=Participant, colour=Participant))+
geom_point(aes(colour = Participant), size = 3)+
labs(x='Condition',y='Estimate',title='Efficacy')+
theme(plot.title = element_text(hjust=.5))+
scale_colour_brewer(palette = 'Spectral')
show(efficacyPlot)
efficacyScatter <- ggplot(efficacy, aes(x=twoStreams, y=eightStreams, colour=ordered(1:10)))+
geom_point(size = 4)+
scale_color_brewer(palette='Spectral', name='Participant')+
lims(x=c(0,1), y=c(0,1))+
labs(title='Efficacy Estimates [1 - P(Guess)]', y = 'Eight Streams', y='Eight Streams')+
theme(plot.title = element_text(size=15, hjust=.5))+
annotate('text', x=.8, y=.45, label = paste0('BF10 = ', round(BF10,2)))+
annotate('text', x = .8, y=.37, label = paste0('Effect size = ', round(posteriorModeEfficacy,2)))+
geom_abline(intercept = 0, slope = 1,linetype='dashed')
show(efficacyScatter)
efficacyBayesPlot <- ggplot(posteriorAndPriorDF, aes(x=delta))+
geom_line(aes(y=posterior, linetype = 'Posterior'))+
geom_line(aes(y=prior, linetype = 'Prior'))+
scale_linetype_manual(values = c('solid','dashed'),  guide = 'legend', name = NULL)+
labs(x = expression(delta), y='Density', title = 'Efficacy Effect Size')
predictionPlot <- ggplot()+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Two Streams'), fun = dnorm, args = list(mean = meanLatencyTwo/83.33, sd = meanPrecisionTwo/83.33), geom='area', alpha = .5)+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Eight Streams'), fun = dnorm, args = list(mean = meanLatencyEight/83.33, sd = meanPrecisionEight/83.33), geom='area', alpha = .6)+
scale_fill_brewer(palette = 'Set1')+
scale_x_continuous(breaks = -3:4,limits = c(-3,4))+
labs(x='SPE', y=NULL, fill = 'Condition')
efficacy$Parameter <- as.character('Efficacy')
latency$Parameter <- as.character('Latency')
precision$Parameter <- as.character('Precision')
allParams <- rbind(efficacy,latency,precision)
allParams <- melt(allParams, measure.vars = c('twoStreams','eightStreams'), variable.name = 'Condition',value.name = 'Estimate')
paramBar <- ggplot(allParams[!allParams$Parameter=='Efficacy',], aes(x=Parameter,y=Estimate, fill = Condition))+
stat_summary(geom='bar', fun.y = mean, position = position_dodge(.9))+
stat_summary(geom='errorbar', fun.data=mean_se, position = position_dodge(.9), width = .3)+
scale_fill_brewer(palette = 'Spectral')
paramBar
predictions <- data.frame(twoStreams = rnorm(1000, latency$twoStreams[7], precision$twoStreams[7]), eightStreams = rnorm(1000, latency$eightStreams[7], precision$eightStreams[7]))
predictions <- melt(predictions, measure.vars = c('twoStreams', 'eightStreams'), variable.name = 'Condition', value.name = 'response')
meanLatencyTwo <- mean(latency$twoStreams)
meanLatencyEight <- mean(latency$eightStreams)
meanPrecisionTwo <- mean(precision$twoStreams)
meanPrecisionEight <- mean(precision$eightStreams)
predictionPlot <- ggplot()+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Two Streams'), fun = dnorm, args = list(mean = meanLatencyTwo/83.33, sd = meanPrecisionTwo/83.33), geom='area', alpha = .5)+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Eight Streams'), fun = dnorm, args = list(mean = meanLatencyEight/83.33, sd = meanPrecisionEight/83.33), geom='area', alpha = .6)+
scale_fill_brewer(palette = 'Set1')+
scale_x_continuous(breaks = -3:4,limits = c(-3,4))+
labs(x='SPE', y=NULL, fill = 'Condition')
predictionPlot
predictionPlot <- ggplot()+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Two Streams'), fun = dnorm, args = list(mean = meanLatencyTwo/83.33, sd = meanPrecisionTwo/83.33), geom='area', alpha = .5)+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Eight Streams'), fun = dnorm, args = list(mean = meanLatencyEight/83.33, sd = meanPrecisionEight/83.33), geom='area', alpha = .6)+
geom_vline(xintercept = 0, linetype = 'dashed')+
scale_fill_brewer(palette = 'Set1')+
scale_x_continuous(breaks = -3:4,limits = c(-3,4))+
labs(x='SPE', y=NULL, fill = 'Condition')
predictionPlot
predictionPlot <- ggplot()+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Two Streams'), fun = dnorm, args = list(mean = meanLatencyTwo/83.33, sd = meanPrecisionTwo/83.33), geom='area', alpha = .5)+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Eight Streams'), fun = dnorm, args = list(mean = meanLatencyEight/83.33, sd = meanPrecisionEight/83.33), geom='area', alpha = .6)+
geom_vline(xintercept = 0, linetype = 'dashed')+
scale_fill_brewer(palette = 'Set1')+
scale_y_continuous(breaks = NULL)+
scale_x_continuous(breaks = -3:4,limits = c(-3,4))+
labs(x='SPE', y=NULL, fill = 'Condition')
predictionPlot
View(MMprecision)
View(latency)
mean(latency$eightStreams)
mean(latency$twoStreams)
ggsave(predictionPlot,'../manuscripts_etc/ECVP poster/Distributions.png', height = 9, width = 16)
ggsave(predictionPlot,filename = '../manuscripts_etc/ECVP poster/Distributions.png', height = 9, width = 16)
predictionPlot <- ggplot()+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Two Streams'), fun = dnorm, args = list(mean = meanLatencyTwo/83.33, sd = meanPrecisionTwo/83.33), geom='area', alpha = .5)+
stat_function(data=data.frame(x=c(-400:400)/83.33), aes(x, fill = 'Eight Streams'), fun = dnorm, args = list(mean = meanLatencyEight/83.33, sd = meanPrecisionEight/83.33), geom='area', alpha = .6)+
geom_vline(xintercept = 0, linetype = 'dashed')+
scale_fill_brewer(palette = 'Set1')+
scale_y_continuous(breaks = NULL)+
scale_x_continuous(breaks = -3:4,limits = c(-3,4))+
labs(x='Temporal Errors', y=NULL, fill = 'Condition')
predictionPlot
ggsave(predictionPlot,filename = '../manuscripts_etc/ECVP poster/Distributions.png', height = 9, width = 16)
rm(list=ls())
library(ggplot2)
theme_set(papaja::theme_apa(base_size = 30) )
setwd('~/gitcode/nStream/manuscripts_etc/ECVP poster/')
BFEight <- read.csv('../../modelOutput/BFsByParticipant_eightStreams.csv', header = F)
BFTwo <- read.csv('../../modelOutput/BFsByParticipant_TwoStreams.csv', header = F)
BFnStream <- rbind(BFEight, BFTwo)
BFnStream$condition <- rep(c('Eight','Two'), each = 10)
eightMin <- paste('min = ', signif(1/min(BFnStream$V1[BFnStream$condition=='Eight']),digits = 2))
ggplot(BFnStream, aes(x=condition, y=1/V1))+
geom_violin()+
geom_jitter(width = .01, alpha=.7)+
scale_y_continuous(trans='log10')+
annotate(geom = 'text',
x = .5,
y=log(1/min(BFnStream$V1[BFnStream$condition=='Eight']),base=10)+100,
label = eightMin,)+
scale_x_discrete(expand=c(0,1))
max(BFnStream$V1)
max(1/BFnStream$V1)
